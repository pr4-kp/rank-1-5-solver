-----
3. CASE:[2, 2] A_0 B_0 A_1 B_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+Max(B_0,B_1))-A_1*(B_0+B_1)==0,B_1>0,B_0*(A_1+Max(A_0,A_1))-B_1*(A_0+A_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1 = QQ["A_0, B_0, A_1, B_1"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
6. CASE:[2, 2] A_0 B_0 A_1 B_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+Max(B_0,B_1))-A_1*(B_0+B_1)==0,B_1>0,B_0*(A_1+Max(A_0,A_1))-B_1*(A_0+A_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1 = QQ["A_0, B_0, A_1, B_1"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
9. CASE:[2, 2] A_0 B_0 A_1 B_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+Max(B_0,B_1))-A_1*(B_0+B_1)==0,B_1>0,B_0*(A_1+Max(A_0,A_1))-B_1*(A_0+A_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1 = QQ["A_0, B_0, A_1, B_1"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
12. CASE:[2, 2] A_0 B_0 A_1 B_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+Max(B_0,B_1))-A_1*(B_0+B_1)==0,B_1>0,B_0*(A_1+Max(A_0,A_1))-B_1*(A_0+A_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1 = QQ["A_0, B_0, A_1, B_1"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_0) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_1) - A_1*(B_0 + B_1),B_0*(A_1 + A_1) - B_1*(A_0 + A_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
14. CASE:[2, 2] A_0 B_0 B_1 A_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(A_0+2*A_1)-B_1*(A_0+A_1)==0,A_1>0,A_0*(B_0+2*B_1)-A_1*(B_0+B_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1 = QQ["A_0, B_0, B_1, A_1"].gens()
I_list = [ideal(0,0,B_0*(A_0 + 2*A_1) - B_1*(A_0 + A_1),A_0*(B_0 + 2*B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1/2 - sqrt(5)/2, 1, 1/2 - sqrt(5)/2)
Solution 2:
(1, 1/2 + sqrt(5)/2, 1, 1/2 + sqrt(5)/2)
-----
16. CASE:[2, 2] A_0 B_0 B_1 A_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(A_0+2*A_1)-B_1*(A_0+A_1)==0,A_1>0,A_0*(B_0+2*B_1)-A_1*(B_0+B_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1 = QQ["A_0, B_0, B_1, A_1"].gens()
I_list = [ideal(0,0,B_0*(A_0 + 2*A_1) - B_1*(A_0 + A_1),A_0*(B_0 + 2*B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1/2 - sqrt(5)/2, 1, 1/2 - sqrt(5)/2)
Solution 2:
(1, 1/2 + sqrt(5)/2, 1, 1/2 + sqrt(5)/2)
-----
18. CASE:[2, 2] A_0 B_0 B_1 A_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(A_0+2*A_1)-B_1*(A_0+A_1)==0,A_1>0,A_0*(B_0+2*B_1)-A_1*(B_0+B_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1 = QQ["A_0, B_0, B_1, A_1"].gens()
I_list = [ideal(0,0,B_0*(A_0 + 2*A_1) - B_1*(A_0 + A_1),A_0*(B_0 + 2*B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1/2 - sqrt(5)/2, 1, 1/2 - sqrt(5)/2)
Solution 2:
(1, 1/2 + sqrt(5)/2, 1, 1/2 + sqrt(5)/2)
-----
20. CASE:[2, 2] A_0 B_0 B_1 A_1
[['l'], ['l'], ['l'], ['l', 'r']]

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(A_0+2*A_1)-B_1*(A_0+A_1)==0,A_1>0,A_0*(B_0+2*B_1)-A_1*(B_0+B_1)==0,A_0*B_1-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1 = QQ["A_0, B_0, B_1, A_1"].gens()
I_list = [ideal(0,0,B_0*(A_0 + 2*A_1) - B_1*(A_0 + A_1),A_0*(B_0 + 2*B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1/2 - sqrt(5)/2, 1, 1/2 - sqrt(5)/2)
Solution 2:
(1, 1/2 + sqrt(5)/2, 1, 1/2 + sqrt(5)/2)
-----
21. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
Solution 1:
(1, 1/2, 1/2, 1, 1)
-----
22. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*Max(B_0,B_1)-A_1*B_0==0,A_2>0,A_0*B_1-A_2*B_0==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_1+A_2))-B_1*(A_0+A_1)==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_1 + A_2) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_1 + A_2) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
23. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['r'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_1))-B_1*(A_0+A_1+A_2)==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + A_1) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
Solution 1:
(1, 1/2, 1/2, 1, 1, 1)
-----
24. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['r'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*Max(B_0,B_1)-A_1*B_0==0,A_2>0,A_0*B_1-A_2*B_0==0,B_1>0,-A_0*B_1+B_0*(A_1+A_2+Max(A_0,A_1+A_2))==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_0),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_0),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
26. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,A_0*B_0-B_2*(A_0+A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1, 1, 1/2, 1/2)
-----
27. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_2))-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,A_0*B_0-B_2*(A_0+A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_2) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1, 1, 1/2, 1/2, 1)
-----
28. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['r'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_1+B_2))-A_1*(B_0+B_2)==0,B_1>0,-A_0*B_1+A_1*B_0==0,B_2>0,-A_0*B_2+B_0*Max(A_0,A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
29. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['r'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_1+B_2))-A_1*B_0==0,B_1>0,-A_0*B_1+A_1*B_0==0,B_2>0,-A_0*B_2+B_0*Max(A_0,A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
31. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
Solution 1:
(1, 1/2, 1/2, 1, 1)
-----
32. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*Max(B_0,B_1)-A_1*B_0==0,A_2>0,A_0*B_1-A_2*B_0==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_1+A_2))-B_1*(A_0+A_1)==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_1 + A_2) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_1 + A_2) - B_1*(A_0 + A_1),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
33. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['r'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_1))-B_1*(A_0+A_1+A_2)==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + A_1) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
Solution 1:
(1, 1/2, 1/2, 1, 1, 1)
-----
34. CASE:[2, 3] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['r'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*Max(B_0,B_1)-A_1*B_0==0,A_2>0,A_0*B_1-A_2*B_0==0,B_1>0,-A_0*B_1+B_0*(A_1+A_2+Max(A_0,A_1+A_2))==0,A_0*B_1-B_0*(A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_0),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_0),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
ideal(0,0,A_0*B_1 - A_1*B_0,A_0*B_1 - A_2*B_0,-A_0*B_1 + B_0*(A_1 + A_2 + A_1 + A_2),A_0*B_1 - B_0*(A_1 + A_2),A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
36. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,A_0*B_0-B_2*(A_0+A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1, 1, 1/2, 1/2)
-----
37. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_2))-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,A_0*B_0-B_2*(A_0+A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_2) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
Solution 1:
(1, 1, 1, 1/2, 1/2, 1)
-----
38. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['r'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_1+B_2))-A_1*(B_0+B_2)==0,B_1>0,-A_0*B_1+A_1*B_0==0,B_2>0,-A_0*B_2+B_0*Max(A_0,A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*(B_0 + B_2),-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
39. CASE:[2, 3] A_0 B_0 A_1 B_1 B_2
[['l'], ['l'], ['l'], ['r'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_1+B_2))-A_1*B_0==0,B_1>0,-A_0*B_1+A_1*B_0==0,B_2>0,-A_0*B_2+B_0*Max(A_0,A_1)==0,A_0*(B_1+B_2)-A_1*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I_list = [ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_0) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_0,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
ideal(0,0,A_0*(B_1 + B_2 + B_1 + B_2) - A_1*B_0,-A_0*B_1 + A_1*B_0,-A_0*B_2 + B_0*A_1,A_0*(B_1 + B_2) - A_1*B_0,A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
41. CASE:[3, 2] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*B_0==0,A_2>0,2*A_0*B_1-A_2*B_0==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_2))-B_1*(A_0+A_1)==0,-A_2*B_0+B_1*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,2*A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1),-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,2*A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_2) - B_1*(A_0 + A_1),-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
42. CASE:[3, 2] A_0 B_0 A_1 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*B_0==0,A_2>0,2*A_0*B_1-A_2*B_0==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_2))-B_1*(A_0+A_1)==0,-A_2*B_0+B_1*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,2*A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_0) - B_1*(A_0 + A_1),-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,2*A_0*B_1 - A_2*B_0,B_0*(A_1 + A_2 + A_2) - B_1*(A_0 + A_1),-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
43. CASE:[3, 2] A_0 A_1 B_0 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0-A_1*B_1==0,B_0>0,A_2>0,A_0*(B_0+B_1)-A_2*B_1==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,-A_2*B_0+B_1*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, B_1 = QQ["A_0, A_1, B_0, A_2, B_1"].gens()
I_list = [ideal(0,A_0*B_0 - A_1*B_1,0,A_0*(B_0 + B_1) - A_2*B_1,B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
]
Solution 1:
(1, -1, 0, 1, -1)
Solution 2:
(1, 1, 2, 1, 1)
-----
45. CASE:[3, 2] A_0 A_1 B_0 A_2 B_1
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0-A_1*B_1==0,B_0>0,A_2>0,A_0*(B_0+B_1)-A_2*B_1==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,-A_2*B_0+B_1*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, B_1 = QQ["A_0, A_1, B_0, A_2, B_1"].gens()
I_list = [ideal(0,A_0*B_0 - A_1*B_1,0,A_0*(B_0 + B_1) - A_2*B_1,B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
]
Solution 1:
(1, -1, 0, 1, -1)
Solution 2:
(1, 1, 2, 1, 1)
-----
47. CASE:[3, 2] A_0 B_0 B_1 A_1 B_2
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,-A_0*B_1+A_1*B_0==0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_2>0,-A_0*B_2+B_0*(A_0+A_1)==0,A_0*B_2-A_1*(B_0+B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, B_2 = QQ["A_0, B_0, B_1, A_1, B_2"].gens()
I_list = [ideal(0,0,-A_0*B_1 + A_1*B_0,A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),-A_0*B_2 + B_0*(A_0 + A_1),A_0*B_2 - A_1*(B_0 + B_1),A_0-1,B_0-1),
]
Solution 1:
(1, -1, 1, -1, 0)
Solution 2:
(1, 1, 1, 1, 2)
-----
49. CASE:[3, 2] A_0 B_0 B_1 A_1 B_2
[['l'], ['l'], ['l'], ['l'], ['l']]

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,-A_0*B_1+A_1*B_0==0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_2>0,-A_0*B_2+B_0*(A_0+A_1)==0,A_0*B_2-A_1*(B_0+B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, B_2 = QQ["A_0, B_0, B_1, A_1, B_2"].gens()
I_list = [ideal(0,0,-A_0*B_1 + A_1*B_0,A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),-A_0*B_2 + B_0*(A_0 + A_1),A_0*B_2 - A_1*(B_0 + B_1),A_0-1,B_0-1),
]
Solution 1:
(1, -1, 1, -1, 0)
Solution 2:
(1, 1, 1, 1, 2)
-----
51. CASE:[3, 2] A_0 B_0 A_1 B_1 A_2
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*B_0==0,B_1>0,B_0*(A_0+A_2+Max(A_1,A_2))-B_1*(A_0+A_1)==0,A_2>0,2*A_0*B_1-A_2*B_0==0,-A_2*B_0+B_1*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, A_2 = QQ["A_0, B_0, A_1, B_1, A_2"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,B_0*(A_0 + A_2 + A_1) - B_1*(A_0 + A_1),2*A_0*B_1 - A_2*B_0,-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,B_0*(A_0 + A_2 + A_2) - B_1*(A_0 + A_1),2*A_0*B_1 - A_2*B_0,-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
]
could not solve, try mathematica!
-----
52. CASE:[3, 2] A_0 B_0 A_1 B_1 A_2
[['l'], ['l'], ['l'], ['l'], ['r']]

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*B_0==0,B_1>0,B_0*(A_0+A_2+Max(A_1,A_2))-B_1*(A_0+A_1)==0,A_2>0,2*A_0*B_1-A_2*B_0==0,-A_2*B_0+B_1*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, A_2 = QQ["A_0, B_0, A_1, B_1, A_2"].gens()
I_list = [ideal(0,0,A_0*B_0 - A_1*B_0,B_0*(A_0 + A_2 + A_1) - B_1*(A_0 + A_1),2*A_0*B_1 - A_2*B_0,-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
ideal(0,0,A_0*B_0 - A_1*B_0,B_0*(A_0 + A_2 + A_2) - B_1*(A_0 + A_1),2*A_0*B_1 - A_2*B_0,-A_2*B_0 + B_1*(A_0 + A_1),A_0-1,B_0-1),
]
could not solve, try mathematica!
