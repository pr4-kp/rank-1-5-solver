-----
CASE:[2, 3] A_0 B_0 A_1 B_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1)-A_1*B_0==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,A_2>0,A_0*B_1-A_2*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, A_2 = QQ["A_0, B_0, A_1, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1) - A_1*B_0,B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - A_2*B_0,A_0-1,B_0-1)
Solution 1:
A_1 = 2.0*A_0
A_2 = A_0
B_1 = B_0

-----
CASE:[2, 3] A_0 B_0 A_1 B_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1)-A_1*B_0==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,A_2>0,A_0*B_1-A_2*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, A_2 = QQ["A_0, B_0, A_1, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1) - A_1*B_0,B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),A_0*B_1 - A_2*B_0,A_0-1,B_0-1)
Solution 1:
A_1 = 2.0*A_0
A_2 = A_0
B_1 = B_0

-----
CASE:[2, 3] A_0 B_0 A_1 A_2 B_1

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*Max(B_0,B_1)-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_1+A_2))-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I = ideal(A_0*Max(B_0, B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + Max(A_0, A_1 + A_2)) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[2, 3] A_0 B_0 A_1 B_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_1+B_2))-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,B_0*Max(A_0,A_1)-B_2*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I = ideal(A_0*(B_1 + B_2 + Max(B_0, B_1 + B_2)) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),B_0*Max(A_0, A_1) - B_2*(A_0 + A_1),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[2, 3] A_0 B_0 A_1 A_2 B_1

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*Max(B_0,B_1)-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_1+A_2))-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I = ideal(A_0*Max(B_0, B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + Max(A_0, A_1 + A_2)) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[2, 3] A_0 B_0 A_1 B_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_1+B_2+Max(B_0,B_1+B_2))-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,B_0*Max(A_0,A_1)-B_2*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I = ideal(A_0*(B_1 + B_2 + Max(B_0, B_1 + B_2)) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),B_0*Max(A_0, A_1) - B_2*(A_0 + A_1),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[2, 3] A_0 A_1 B_0 A_2 A_3

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0==0,B_0>0,A_2>0,A_0*B_0==0,A_3>0,A_0*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, A_3 = QQ["A_0, A_1, B_0, A_2, A_3"].gens()
I = ideal(A_0*B_0,A_0*B_0,A_0*B_0,A_0-1,B_0-1)
-----
CASE:[2, 3] A_0 A_1 B_0 B_1 A_2

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*(B_0+B_1)==0,B_0>0,B_1>0,B_0*(A_0+A_2)-B_1*Max(A_2,A_0+A_1)==0,A_2>0,A_0*(2*B_0+2*B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, B_1, A_2 = QQ["A_0, A_1, B_0, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1),B_0*(A_0 + A_2) - B_1*Max(A_2, A_0 + A_1),A_0*(2*B_0 + 2*B_1),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[2, 3] A_0 A_1 B_0 A_2 A_3

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0==0,B_0>0,A_2>0,A_0*B_0==0,A_3>0,A_0*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, A_3 = QQ["A_0, A_1, B_0, A_2, A_3"].gens()
I = ideal(A_0*B_0,A_0*B_0,A_0*B_0,A_0-1,B_0-1)
-----
CASE:[2, 3] A_0 A_1 B_0 B_1 A_2

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*(B_0+B_1)==0,B_0>0,B_1>0,B_0*(A_0+A_2)-B_1*Max(A_2,A_0+A_1)==0,A_2>0,A_0*(2*B_0+2*B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, B_1, A_2 = QQ["A_0, A_1, B_0, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1),B_0*(A_0 + A_2) - B_1*Max(A_2, A_0 + A_1),A_0*(2*B_0 + 2*B_1),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[2, 3] A_0 A_1 B_0 A_2 B_1

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0-A_1*B_1==0,B_0>0,A_2>0,A_0*(B_0+B_1)-A_2*B_1==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, B_1 = QQ["A_0, A_1, B_0, A_2, B_1"].gens()
I = ideal(A_0*B_0 - A_1*B_1,A_0*(B_0 + B_1) - A_2*B_1,B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
A_2 = 2.0*A_0
B_1 = B_0

-----
CASE:[2, 3] A_0 A_1 B_0 A_2 B_1

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0-A_1*B_1==0,B_0>0,A_2>0,A_0*(B_0+B_1)-A_2*B_1==0,B_1>0,B_0*(A_0+A_1+A_2)-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, B_1 = QQ["A_0, A_1, B_0, A_2, B_1"].gens()
I = ideal(A_0*B_0 - A_1*B_1,A_0*(B_0 + B_1) - A_2*B_1,B_0*(A_0 + A_1 + A_2) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
A_2 = 2.0*A_0
B_1 = B_0

-----
CASE:[2, 3] A_0 B_0 B_1 A_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(2*A_1+2*A_2)-B_1*(A_0+A_2)==0,A_1>0,A_0*(B_0+B_1)-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, A_2 = QQ["A_0, B_0, B_1, A_1, A_2"].gens()
I = ideal(B_0*(2*A_1 + 2*A_2) - B_1*(A_0 + A_2),A_0*(B_0 + B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
A_2 = 0.666666666666667*A_0
B_1 = 2.0*B_0

-----
CASE:[2, 3] A_0 B_0 B_1 A_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(2*A_1+2*A_2)-B_1*(A_0+A_2)==0,A_1>0,A_0*(B_0+B_1)-A_1*(B_0+B_1)==0,A_2>0,A_0*B_1-A_2*(B_0+B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, A_2 = QQ["A_0, B_0, B_1, A_1, A_2"].gens()
I = ideal(B_0*(2*A_1 + 2*A_2) - B_1*(A_0 + A_2),A_0*(B_0 + B_1) - A_1*(B_0 + B_1),A_0*B_1 - A_2*(B_0 + B_1),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
A_2 = 0.666666666666667*A_0
B_1 = 2.0*B_0

-----
CASE:[2, 3] A_0 B_0 B_1 A_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,-A_0*B_1+A_1*B_0==0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_2>0,-A_0*B_2+B_0*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, B_2 = QQ["A_0, B_0, B_1, A_1, B_2"].gens()
I = ideal(-A_0*B_1 + A_1*B_0,A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),-A_0*B_2 + B_0*(A_0 + A_1),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
B_1 = B_0
B_2 = 2.0*B_0

-----
CASE:[2, 3] A_0 B_0 B_1 A_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,-A_0*B_1+A_1*B_0==0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_2>0,-A_0*B_2+B_0*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, B_2 = QQ["A_0, B_0, B_1, A_1, B_2"].gens()
I = ideal(-A_0*B_1 + A_1*B_0,A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),-A_0*B_2 + B_0*(A_0 + A_1),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
B_1 = B_0
B_2 = 2.0*B_0

-----
CASE:[3, 2] A_0 B_0 A_1 A_2 B_1

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*(B_0+B_1)==0,A_2>0,2*A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_2))-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I = ideal(A_0*B_0 - A_1*(B_0 + B_1),2*A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + Max(A_0, A_2)) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 B_0 A_1 A_2 B_1

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*B_0-A_1*(B_0+B_1)==0,A_2>0,2*A_0*B_1-A_2*(B_0+B_1)==0,B_1>0,B_0*(A_1+A_2+Max(A_0,A_2))-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, A_2, B_1 = QQ["A_0, B_0, A_1, A_2, B_1"].gens()
I = ideal(A_0*B_0 - A_1*(B_0 + B_1),2*A_0*B_1 - A_2*(B_0 + B_1),B_0*(A_1 + A_2 + Max(A_0, A_2)) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 A_1 B_0 A_2 A_3

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0==0,B_0>0,A_2>0,A_0*B_0==0,A_3>0,0==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, A_3 = QQ["A_0, A_1, B_0, A_2, A_3"].gens()
I = ideal(A_0*B_0,A_0*B_0,0,A_0-1,B_0-1)
-----
CASE:[3, 2] A_0 A_1 B_0 A_2 A_3

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0==0,B_0>0,A_2>0,A_0*B_0==0,A_3>0,0==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, A_3 = QQ["A_0, A_1, B_0, A_2, A_3"].gens()
I = ideal(A_0*B_0,A_0*B_0,0,A_0-1,B_0-1)
-----
CASE:[3, 2] A_0 B_0 B_1 A_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(A_1+A_2)-B_1*(A_0+A_2)==0,A_1>0,A_0*(B_0+B_1)-A_1*(B_0+B_1)==0,A_2>0,-A_2*(B_0+B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, A_2 = QQ["A_0, B_0, B_1, A_1, A_2"].gens()
I = ideal(B_0*(A_1 + A_2) - B_1*(A_0 + A_2),A_0*(B_0 + B_1) - A_1*(B_0 + B_1),-A_2*(B_0 + B_1),A_0-1,B_0-1)
-----
CASE:[3, 2] A_0 B_0 B_1 A_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,B_0*(A_1+A_2)-B_1*(A_0+A_2)==0,A_1>0,A_0*(B_0+B_1)-A_1*(B_0+B_1)==0,A_2>0,-A_2*(B_0+B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, A_2 = QQ["A_0, B_0, B_1, A_1, A_2"].gens()
I = ideal(B_0*(A_1 + A_2) - B_1*(A_0 + A_2),A_0*(B_0 + B_1) - A_1*(B_0 + B_1),-A_2*(B_0 + B_1),A_0-1,B_0-1)
-----
CASE:[3, 2] A_0 A_1 B_0 A_2 B_1

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0-A_1*B_1==0,B_0>0,A_2>0,A_0*(B_1+Max(B_0,B_1))-A_2*B_1==0,B_1>0,B_0*(A_2+Max(A_2,A_0+A_1))-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, B_1 = QQ["A_0, A_1, B_0, A_2, B_1"].gens()
I = ideal(A_0*B_0 - A_1*B_1,A_0*(B_1 + Max(B_0, B_1)) - A_2*B_1,B_0*(A_2 + Max(A_2, A_0 + A_1)) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 A_1 B_0 A_2 B_1

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*B_0-A_1*B_1==0,B_0>0,A_2>0,A_0*(B_1+Max(B_0,B_1))-A_2*B_1==0,B_1>0,B_0*(A_2+Max(A_2,A_0+A_1))-B_1*(A_0+A_1+A_2)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, A_2, B_1 = QQ["A_0, A_1, B_0, A_2, B_1"].gens()
I = ideal(A_0*B_0 - A_1*B_1,A_0*(B_1 + Max(B_0, B_1)) - A_2*B_1,B_0*(A_2 + Max(A_2, A_0 + A_1)) - B_1*(A_0 + A_1 + A_2),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 B_0 B_1 A_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,-A_0*B_1+A_1*B_0==0,A_1>0,A_0*(B_2+Max(B_2,B_0+B_1))-A_1*(B_0+B_1+B_2)==0,B_2>0,-A_0*B_2+B_0*(A_1+Max(A_0,A_1))==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, B_2 = QQ["A_0, B_0, B_1, A_1, B_2"].gens()
I = ideal(-A_0*B_1 + A_1*B_0,A_0*(B_2 + Max(B_2, B_0 + B_1)) - A_1*(B_0 + B_1 + B_2),-A_0*B_2 + B_0*(A_1 + Max(A_0, A_1)),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 B_0 B_1 A_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,B_1>0,-A_0*B_1+A_1*B_0==0,A_1>0,A_0*(B_2+Max(B_2,B_0+B_1))-A_1*(B_0+B_1+B_2)==0,B_2>0,-A_0*B_2+B_0*(A_1+Max(A_0,A_1))==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, B_1, A_1, B_2 = QQ["A_0, B_0, B_1, A_1, B_2"].gens()
I = ideal(-A_0*B_1 + A_1*B_0,A_0*(B_2 + Max(B_2, B_0 + B_1)) - A_1*(B_0 + B_1 + B_2),-A_0*B_2 + B_0*(A_1 + Max(A_0, A_1)),A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 B_0 A_1 B_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1)-A_1*B_0==0,B_1>0,B_0*(A_0+A_2+Max(A_1,A_2))-B_1*(A_0+A_1+A_2)==0,A_2>0,2*A_0*B_1-A_2*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, A_2 = QQ["A_0, B_0, A_1, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1) - A_1*B_0,B_0*(A_0 + A_2 + Max(A_1, A_2)) - B_1*(A_0 + A_1 + A_2),2*A_0*B_1 - A_2*B_0,A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 B_0 A_1 B_1 A_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1)-A_1*B_0==0,B_1>0,B_0*(A_0+A_2+Max(A_1,A_2))-B_1*(A_0+A_1+A_2)==0,A_2>0,2*A_0*B_1-A_2*B_0==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, A_2 = QQ["A_0, B_0, A_1, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1) - A_1*B_0,B_0*(A_0 + A_2 + Max(A_1, A_2)) - B_1*(A_0 + A_1 + A_2),2*A_0*B_1 - A_2*B_0,A_0-1,B_0-1)
could not solve, try mathematica!
-----
CASE:[3, 2] A_0 B_0 A_1 B_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,A_0*B_0-B_2*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I = ideal(A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
B_1 = 0.5*B_0
B_2 = 0.5*B_0

-----
CASE:[3, 2] A_0 B_0 A_1 B_1 B_2

FOR MATHEMATICA:
A_0>0,B_0>0,A_1>0,A_0*(B_0+B_1+B_2)-A_1*(B_0+B_1+B_2)==0,B_1>0,A_1*B_0-B_1*(A_0+A_1)==0,B_2>0,A_0*B_0-B_2*(A_0+A_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, B_0, A_1, B_1, B_2 = QQ["A_0, B_0, A_1, B_1, B_2"].gens()
I = ideal(A_0*(B_0 + B_1 + B_2) - A_1*(B_0 + B_1 + B_2),A_1*B_0 - B_1*(A_0 + A_1),A_0*B_0 - B_2*(A_0 + A_1),A_0-1,B_0-1)
Solution 1:
A_1 = A_0
B_1 = 0.5*B_0
B_2 = 0.5*B_0

-----
CASE:[3, 2] A_0 A_1 B_0 B_1 A_2

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*(B_0+B_1)==0,B_0>0,B_1>0,B_0*(A_0+2*A_2)-B_1*(A_0+A_1)==0,A_2>0,A_0*(B_0+2*B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, B_1, A_2 = QQ["A_0, A_1, B_0, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1),B_0*(A_0 + 2*A_2) - B_1*(A_0 + A_1),A_0*(B_0 + 2*B_1),A_0-1,B_0-1)
-----
CASE:[3, 2] A_0 A_1 B_0 B_1 A_2

FOR MATHEMATICA:
A_0>0,A_1>0,A_0*(B_0+B_1)==0,B_0>0,B_1>0,B_0*(A_0+2*A_2)-B_1*(A_0+A_1)==0,A_2>0,A_0*(B_0+2*B_1)==0,

FOR SAGE (to convert to Groebner basis):
A_0, A_1, B_0, B_1, A_2 = QQ["A_0, A_1, B_0, B_1, A_2"].gens()
I = ideal(A_0*(B_0 + B_1),B_0*(A_0 + 2*A_2) - B_1*(A_0 + A_1),A_0*(B_0 + 2*B_1),A_0-1,B_0-1)
